bash: \
	# change shell to homebrew bash
	echo "/usr/local/bin/bash" | sudo tee -a /etc/shells
	chsh -s /usr/local/bin/bash

ruby: \
	~/.rbenv \
 	~/.rbenv/plugins/ruby-build \
 	~/.rbenv/plugins/rbenv-update \
 	~/.rbenv/plugins/rbenv-readline \
 	~/.rbenv/plugins/rbenv-gemset

# rbenv is an amazing ruby version manager, simple, straightforward, local
~/.rbenv:
 	git clone https://github.com/rbenv/rbenv.git ~/.rbenv
 	cd ~/.rbenv && src/configure && make -C src

# ruby-build is a repository hosting all kinds of ruby versions to install
~/.rbenv/plugins/ruby-build:
 	git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build

# rbenv-update allows updating rbenv plugins easily
~/.rbenv/plugins/rbenv-update:
 	git clone https://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update

# rbenv-readline does the right thing when it comes to linking a brew installed readline to ruby
~/.rbenv/plugins/rbenv-readline:
 	git clone git://github.com/tpope/rbenv-readline.git ~/.rbenv/plugins/rbenv-readline

# rbenv-gemset allows managing project specific set of gems
~/.rbenv/plugins/rbenv-gemset:
 	git clone git://github.com/jf/rbenv-gemset.git ~/.rbenv/plugins/rbenv-gemset

vim: \
	vim-itself \
 	vim-plugins

vim-itself:
 	# newer version of vim
 	brew install vim --with-override-system-vi
 	# create vim directories
 	mkdir -p ~/.vim/tmp/{backup,swap,undo}

vim-plugins: \
 	~/.vim/bundle/Vundle.vim
 	# disable colorscheme for installing plugins to a temporary .vimrc
 	sed 's/colorscheme/"colorscheme/' .vimrc > /tmp/.vimrc
 	# install plugins with temporary vimrc
 	vim -u /tmp/.vimrc +PluginInstall +qall
 	-rm /tmp/.vimrc
 	# post installation steps of command-t
 	cd ~/.vim/bundle/command-t/ruby/command-t/ext/command-t && ruby extconf.rb && make

# install vundle, a vim package manager
~/.vim/bundle/Vundle.vim:
 	git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

# Here is a comprehensive guide: https://github.com/drduh/macOS-Security-and-Privacy-Guide
# The following settings implement some basic security measures
harder:
 	# Enable the firewall
 	sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
 	# Enable logging on the firewall
 	sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setloggingmode on
 	# Enable stealth mode (computer does not respond to PING or TCP connections on closed ports)
 	sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on
 	# Prevent built-in software as well as code-signed, downloaded software from being whitelisted automatically
 	sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsigned off
 	sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setallowsignedapp off
 	# Restart the firewall (this should remain last)
 	-sudo pkill -HUP socketfilterfw
 	# Enable touch id for sudo (if available)
 	-@test -f /usr/lib/pam/pam_tid.so* && (grep pam_tid.so /etc/pam.d/sudo || sudo /usr/local/bin/sed -e '2iauth       sufficient     pam_tid.so' -i /etc/pam.d/sudo)
